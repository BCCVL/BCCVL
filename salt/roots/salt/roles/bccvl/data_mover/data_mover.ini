{% set sentry = salt['pillar.get']('sentry', {}) %}
###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
###

[app:pyramid]
use = egg:data_mover

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_tm

sqlalchemy.url = sqlite:///production.sqlite

# Time between attempts to download ALA occurrences in seconds
ala_service.sleep_time = 10

# URLs to ALA APIs. ${lsid} is replaced when performing the request
ala_service.occurrence_url = http://biocache.ala.org.au/ws/occurrences/index/download?qa=zeroCoordinates,badlyFormedBasisOfRecord,detectedOutlier,decimalLatLongCalculationFromEastingNorthingFailed,missingBasisOfRecord,decimalLatLongCalculationFromVerbatimFailed,coordinatesCentreOfCountry,geospatialIssue,coordinatesOutOfRange,speciesOutsideExpertRange,userVerified,processingError,decimalLatLongConverionFailed,coordinatesCentreOfStateProvince,habitatMismatch&q=lsid:${lsid}&fields=decimalLongitude,decimalLatitude,coordinateUncertaintyInMeters.p,eventDate.p,year.p,month.p&reasonTypeId=4
ala_service.metadata_url = http://bie.ala.org.au/ws/species/${lsid}.json

# Specify directory for tmp files here - default is the local /tmp directory
# Make sure that the directory actually exists
# tmp.dir = /tmp/datamover_tmp
tmp.dir = {{ pillar['data_mover']['tmpdir'] }}

# Specify the openstack credential and password for Nectar swift service
{% set nectar = salt['pillar.get']('data_mover:swift:nectar') %}
swift_service.nectar.auth_url = {{ nectar.auth.url }}
swift_service.nectar.auth_version = {{ nectar.auth.version }}
swift_service.nectar.tenant_name = {{ nectar.tenant.name }}
swift_service.nectar.user = {{ nectar.user.name }}
swift_service.nectar.key = {{ nectar.user.key }}

###
# Use repoze
###
[filter:vhm]
use = egg:repoze.vhm#vhm_path

###
# Add a Pipeline
###
[pipeline:main]
pipeline =
    {{ 'raven' if sentry else ''}}
    vhm
    pyramid

{% if sentry %}
[filter:raven]
use = egg:raven#raven
dsn = {{ sentry['dsn'] }}
{% endif %}

[server:main]
use = egg:waitress#main
host = 127.0.0.1
port = 10700

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, data_mover, sqlalchemy{{ ', sentry' if sentry else '' }}

[handlers]
keys = syslog{{ ', sentry' if sentry else '' }}

[formatters]
keys = syslog{{ ', sentry' if sentry else '' }}

[logger_root]
level = INFO
handlers = syslog{{ ', sentry' if sentry else '' }}

[logger_data_mover]
level = INFO
qualname = data_mover
handlers = 

[logger_sqlalchemy]
level = WARN
qualname = sqlalchemy.engine
handlers = 
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_syslog]
class = handlers.SysLogHandler
args = ('/dev/log', handlers.SysLogHandler.LOG_LOCAL3, )
formatter = syslog

[formatter_syslog]
format = data_mover[%(threadName)s]: %(levelname)s: %(name)s: %(message)s

{% if sentry %}
[logger_sentry]
level = ERROR
handlers = syslog
qualname = sentry.errors
propagate = 0

[handler_sentry]
class = raven.handlers.logging.SentryHandler
args = ('{{ sentry['dsn'] }}',)
level = ERROR
formatter = sentry

[formatter_sentry]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
{% endif %}
