# need NameVirtualHost directive before including this.
# Apache server needs to set up global configs:
#
NameVirtualHost *:443
NameVirtualHost *:80
#

ExtendedStatus On
ProxyStatus On

{% set haproxy = pillar['haproxy'] %}
{% set varnish = pillar['varnish'] %}
{% set visualiser = pillar['visualiser'] %}
{% set data_mover = pillar['data_mover'] %}
{% set plone = pillar['plone'] %}
{% set apache = pillar['apache'] %}
{% set shibboleth = salt['pillar.get']('shibboleth:enabled', False) %}

{% set debug = pillar['plone']['instances']['instance-debug'] %}
{% set zeomonitor = pillar['plone']['zeomonitor'] %}

<VirtualHost *:80>
    ServerName {{ apache.servername }}
    ServerAdmin {{ apache.serveradmin }}

    UseCanonicalName off

    #Header set X-Frame-Options "SAMEORIGIN"
    #Header set Strict-Transport-Security "max-age=15768000; includeSubDomains"
    #Header set X-XSS-Protection "1; mode=block"
    #Header set X-Content-Type-Options "nosniff"
    #Header set Content-Security-Policy-Report-Only "default-src 'self'; img-src *; style-src 'unsafe-inline'; script-src 'unsafe-inline' 'unsafe-eval'"

    # ProxyVia Off | On | Block

    # prevent your web server from being used as global HTTP proxy
    <LocationMatch "^[^/]">
        Deny from all
    </LocationMatch>

    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

    ProxyRequests Off
    RewriteEngine On

    # Redirect to HTTPS if we have a Zope session
    RewriteCond %{HTTP_COOKIE} __ac=
    RewriteRule ^($|/.*) https://%{SERVER_NAME}$1 [R,L]

    # Redirect login requests to SSL
    RewriteRule (.*)/(login|require_login|failsafe_login_form)(.*) https://%{SERVER_NAME}/$1/$2$3 [R,L]
    # Rewrite for visualiser
    RewriteRule ^/_visualiser/(.*)$ /VirtualHostBase/http/%{SERVER_NAME}:80/VirtualHostRoot/_vh__visualiser/$1 [PT]
    # Rewrite Plone
    RewriteRule ^/(.*)$ /VirtualHostBase/http/%{SERVER_NAME}:80/{{ plone.siteid }}/VirtualHostRoot/$1 [PT]


    # Proxy to visualiser
    <LocationMatch /_vh_visualiser/>
        ProxyPassMatch http://{{ visualiser.host }}:{{ visualiser.port }}/
    </LocationMatch>

    # Proxy to Plone
    <Location />
        ProxyPass http://{{ varnish.host }}:{{ varnish.port }}/
    </Location>

</VirtualHost>

<VirtualHost *:443>
    SSLCertificateFile /etc/pki/tls/certs/bccvl.crt.pem
    SSLCertificateKeyFile /etc/pki/tls/private/bccvl.key.pem

    ServerName {{ apache.servername }}
    ServerAdmin {{ apache.serveradmin }}

    UseCanonicalName off

    #Header set X-Frame-Options "SAMEORIGIN"
    #Header set Strict-Transport-Security "max-age=15768000; includeSubDomains"
    #Header set X-XSS-Protection "1; mode=block"
    #Header set X-Content-Type-Options "nosniff"
    #Header set Content-Security-Policy-Report-Only "default-src 'self'; img-src *; style-src 'unsafe-inline'; script-src 'unsafe-inline' 'unsafe-eval'"

    # ProxyVia Off | On | Block

    # prevent your web server from being used as global HTTP proxy
    <LocationMatch "^[^/]">
      Deny from all
    </LocationMatch>

    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>

    # Use separate log files for the SSL virtual host; note that LogLevel
    # is not inherited from httpd.conf.
    ErrorLog logs/ssl_error_log
    TransferLog logs/ssl_access_log
    LogLevel warn

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on
    SSLProtocol All -SSLv2 -SSLv3

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #     This forces an unclean shutdown when the connection is closed, i.e. no
    #     SSL close notify alert is send or allowed to received.  This violates
    #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #     this when you receive I/O errors because of the standard approach where
    #     mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #     This forces an accurate shutdown when the connection is closed, i.e. a
    #     SSL close notify alert is send and mod_ssl waits for the close notify
    #     alert of the client. This is 100% SSL/TLS standard compliant, but in
    #     practice often causes hanging connections with brain-dead browsers. Use
    #     this only for browsers where you know that their SSL implementation
    #     works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    SetEnvIf User-Agent ".*MSIE.*" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog logs/ssl_request_log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

    ProxyRequests Off

    RewriteEngine On
    # Set Shibboleth Headers if available
    RequestHeader set X_REMOTE_USER %{persistent-id}e env=persistent-id
    RequestHeader set SHIB_PERSON_COMMONNAME %{displayName}e env=displayName
    RequestHeader set SHIB_INETORGPERSON_MAIL %{mail}e env=mail

    # Let Shibboleth resources and server status,  pass through normally
    RewriteRule ^/_zope(.*)$ /VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__zope$1 [PT]
    RewriteRule ^/_debug(.*)$ /VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__debug$1 [PT]
    RewriteRule ^/_visualiser/(.*)$ /VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__visualiser/$1 [PT]
    RewriteRule ^/_data_mover/(.*)$ /VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__data_mover/$1 [PT]
    RewriteCond %{REQUEST_URI} !^/(shibboleth-sp|Shibboleth.sso|server-(status|info)|_haproxy|_zeo)
    RewriteRule ^/(.*)$ /VirtualHostBase/https/%{SERVER_NAME}:443/{{ plone.siteid }}/VirtualHostRoot/$1 [PT]

    # pass through shibboleth endpoints
    <LocationMatch "^/(shibboleth-sp|Shibboleth.sso)">
        ProxyPassMatch !
    </LocationMatch>

    # protect server status pages
    # TODO: add proxy status?
    <LocationMatch "^/(server-(status|info))">
        {% if shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        ProxyPassMatch !
    </LocationMatch>

    <Location /_haproxy>
        {% if shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        ProxyPass http://{{ haproxy.host }}:{{ haproxy.port }}/_haproxy
        ProxyPassReverse http://{{ haproxy.host }}:{{ haproxy.port }}
    </Location>

    # TODO: don't use shibboleth for zeo Monitor
    <Location /_zeo>
        {% if shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        ProxyPass http://{{ zeomonitor.host }}:{{ zeomonitor.port }}
        ProxyPassReverse http://{{ zeomonitor.host }}:{{ zeomonitor.port }}
    </Location>

    <LocationMatch /__vh_zope>
        {% if shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        # Allow access to Zope root
        ProxyPassMatch http://{{ varnish.host }}:{{ varnish.port }}
    </LocationMatch>

    <LocationMatch /__vh_debug>
        {% if shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        # Allow access to Zope root
        ProxyPassMatch http://{{ debug.host }}:{{ debug.port }}
    </LocationMatch>

    <LocationMatch /__vh_visualiser>
        # TODO: No shibboleth yet for visualiser
        ProxyPassMatch http://{{ visualiser.host }}:{{ visualiser.port }}
    </LocationMatch>

    <LocationMatch /__vh_data_mover/>
        SSLVerifyClient require
        SSLVerifyDepth 1
        SSLCACertificateFile /etc/pki/tls/certs/bccvlca.crt.pem
        SSLRequire %{SSL_CLIENT_S_DN_CN} eq "worker-{{ saltenv }}.bccvl.org.au"
        SSLRequire %{SSL_CLIENT_S_DN_O} eq "BCCVL"
        SSLRequire %{SSL_CLIENT_I_DN_CN} eq "bccvlca.bccvl.org.au"
        ProxyPassMatch http://{{ data_mover.host }}:{{ data_mover.port }}
    </LocationMatch>

    <Location />
        #
        # Shibboleth Config
        #
        SSLRequireSSL
        {% if shibboleth %}
        AuthType shibboleth
        ShibRequestSetting requireSession Off
        Require shibboleth
        {% endif %}
        # Proxy to Plone
        ProxyPass http://{{ varnish.host }}:{{ varnish.port }}/
    </Location>


</VirtualHost>
