# need NameVirtualHost directive before including this.
# Apache server needs to set up global configs:
#
# NameVirtualHost *:443
# NameVirtualHost *:80
#

{% set haproxy = pillar['haproxy'] %}
{% set varnish = pillar['varnish'] %}
{% set visualiser = pillar['visualiser'] %}
{% set data_mover = pillar['data_mover'] %}
{% set plone = pillar['plone'] %}
{% set apache = pillar['apache'] %}

{% set debug = pillar['plone']['instances']['instance-debug'] %}
{% set zeomonitor = pillar['plone']['zeomonitor'] %}


<VirtualHost *:80>
    ServerName {{ apache.servername }}
    ServerAdmin {{ apache.serveradmin }}

    <Location />
    {% if httpd.shibboleth %}
        AuthType shibboleth
        ShibRequestSetting requireSession Off
        Require shibboleth
    {% endif %}
    </Location>

    ProxyRequests Off
    RewriteEngine On
    RequestHeader set X_REMOTE_USER %{persistent-id}e
    RequestHeader set SHIB_PERSON_COMMONNAME %{displayName}e
    RequestHeader set SHIB_INETORGPERSON_MAIL %{mail}e
    # TODO: redirect to ssl for login and in case we have an auth token in the request
    # Rewrite to access visualiser
    RewriteRule ^/_visualiser/(.*)$ http://{{ visualiser.host }}:{{ visualiser.port }}/VirtualHostBase/http/%{SERVER_NAME}:80/VirtualHostRoot/_vh__visualiser/$1 [L,P]
    # everything else straight through to Plone
    RewriteRule ^/(.*)$ http://{{ varnish.host }}:{{ varnish.port }}/VirtualHostBase/http/%{SERVER_NAME}:80/{{ plone.siteid }}/VirtualHostRoot/$1 [L,P]


</VirtualHost>

<VirtualHost *:443>
    SSLCertificateFile /etc/pki/tls/certs/bccvl.crt.pem
    SSLCertificateKeyFile /etc/pki/tls/private/bccvl.key.pem

    ServerName {{ httpd.servername }}
    ServerAdmin {{ httpd.serveradmin }}
    UseCanonicalName On

    # Use separate log files for the SSL virtual host; note that LogLevel
    # is not inherited from httpd.conf.
    ErrorLog logs/ssl_error_log
    TransferLog logs/ssl_access_log
    LogLevel warn

    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #     This forces an unclean shutdown when the connection is closed, i.e. no
    #     SSL close notify alert is send or allowed to received.  This violates
    #     the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #     this when you receive I/O errors because of the standard approach where
    #     mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #     This forces an accurate shutdown when the connection is closed, i.e. a
    #     SSL close notify alert is send and mod_ssl waits for the close notify
    #     alert of the client. This is 100% SSL/TLS standard compliant, but in
    #     practice often causes hanging connections with brain-dead browsers. Use
    #     this only for browsers where you know that their SSL implementation
    #     works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    SetEnvIf User-Agent ".*MSIE.*" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

    #   Per-Server Logging:
    #   The home of a custom SSL log file. Use this when you want a
    #   compact non-error SSL logfile on a virtual host basis.
    CustomLog logs/ssl_request_log \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

    RewriteEngine On
    RequestHeader set X_REMOTE_USER %{persistent-id}e
    RequestHeader set SHIB_PERSON_COMMONNAME %{displayName}e
    RequestHeader set SHIB_INETORGPERSON_MAIL %{mail}e
    # Rewrite to access haproxy web interface
    RewriteRule ^/_haproxy(.*)$ http://{{ haproxy.host }}:{{ haproxy.port }}/_haproxy$1 [L,P]
    # Allow access to Zope root
    RewriteRule ^/_zope(.*)$ http://{{ varnish.host }}:{{ varnish.port }}/VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__zope$1 [L,P]
    # Allow access to debug instance
    RewriteRule ^/_debug(.*)$ http://{{ debug.host }}:{{ debug.port }}/VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__debug$1 [L,P]
    # Alloww access to Zeo Monitor
    RewriteRule ^/_zeo/(.*)$ http://{{ zeomonitor.host }}:{{ zeomonitor.port }}/$1 [L,P]
    # Rewrite to access visualiser
    RewriteRule ^/_visualiser/(.*)$ http://{{ visualiser.host }}:{{ visualiser.port }}/VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__visualiser/$1 [L,P]
    # Rewrite to access data_mover
    RewriteRule ^/_data_mover/(.*)$ http://{{ data_mover.host }}:{{ data_mover.port }}/VirtualHostBase/https/%{SERVER_NAME}:443/VirtualHostRoot/_vh__data_mover/$1 [L,P]
    # Let Shibboleth resources and server status,  pass through normally
    RewriteCond %{REQUEST_URI} !^/(shibboleth-sp|Shibboleth.sso|server-(status|info))
    # and proxy everything else to our Virtulahost in Zope
    RewriteRule ^/(.*)$ http://{{ varnish.host }}:{{ varnish.port }}/VirtualHostBase/https/%{SERVER_NAME}:443/{{ plone.siteid }}/VirtualHostRoot/$1 [L,P]

    <Location />
        #
        # Shibboleth Config
        #
        SSLRequireSSL
        {% if httpd.shibboleth %}
        AuthType shibboleth
        ShibRequestSetting requireSession Off
        Require shibboleth
        {% endif %}
    </Location>

    # TODO: don't use shibboleth for zeo Monitor
    # TODO: allow shib protected access to 4store test page?
    {% for location, host, port in [('_haproxy', haproxy.host, haproxy.port),
                                    ('_zeo', zeomonitor.host, zeomonitor.port)] %}

    <Location /{{ location }}>
        {% if httpd.shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
        ProxyPassReverse http://{{ host }}:{{ port }}
    </Location>
    {% endfor %}

    <Location /_zope>
        {% if httpd.shibboleth %}
        ShibRequestSetting requireSession On
        ShibRequireAll On
        ShibAccessControl /etc/httpd/conf.d/bccvl_accesscontrol.xml
        Require shibboleth
        {% endif %}
    </Location>

    <Location /_data_mover>
        SSLVerifyClient require
        SSLVerifyDepth 1
        SSLCACertificateFile /etc/pki/tls/certs/bccvlca.crt.pem
        SSLRequire %{SSL_CLIENT_S_DN_CN} eq "worker-{{ saltenv }}.bccvl.org.au"
        SSLRequire %{SSL_CLIENT_S_DN_O} eq "BCCVL"
        SSLRequire %{SSL_CLIENT_I_DN_CN} eq "bccvlca.bccvl.org.au"
    </Location>

</VirtualHost>