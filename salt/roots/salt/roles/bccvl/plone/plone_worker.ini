{% set authtkt = salt['pillar.get']('authtkt', {}) %}
{% set nectar = salt['pillar.get']('nectar', {}) %}
{% set oauth = salt['pillar.get']('oauth', {}) %}
{% set plone = salt['pillar.get']('plone', {}) %}
{% set sentry = salt['pillar.get']('sentry',{}) %}
{% set ala = salt['pillar.get']('ala', {}) %}

[cookie]
{% for key in authtkt %}
{{ key }} = {{ authtkt[key] }}
{% endfor %}

[ssl]
verify = {{ plone.get('ssl_verify', 'True') }}

{% if sentry %}
[sentry]
dsn = {{ sentry['dsn'] }}
{% endif %}

{% if nectar %}
[swift]
{% for key in nectar %}
{{ key }} = {{ nectar[key] }}
{% endfor %}
{% endif %}

{% if oauth %}
[oauth]
{% for provider in oauth %}
{% for key in oauth[provider] %}
{{ provider }}_{{ key }} = {{ oauth[provider][key] }}
{% endfor %}
{% endfor %}
{% endif %}

{% if ala %}
[ala]
{% for key in ala %}
{{ key }} = {{ ala[key] }}
{% endfor %}
{% endif %}

[loggers]
keys = root, swiftclient

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_swiftclient]
level = CRITICAL
qualname = swiftclient
handlers =

[handler_console]
class = logging.handlers.SysLogHandler
args=('/dev/log', handlers.SysLogHandler.LOG_USER)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
