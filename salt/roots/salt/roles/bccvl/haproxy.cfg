#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
  log      127.0.0.1 local6

  chroot   /var/lib/haproxy
  pidfile  /var/run/haproxy.pid
  maxconn  4000
  user     haproxy
  group    haproxy
  daemon
  nbproc 1

  # turn on stats unix socket
  stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
  mode     http
  log      global
  option   httplog
  option   dontlognull
  option   httpclose
  option   forwardfor   except 127.0.0.0/8
  # Remove requests from the queue if people press stop button
  option   abortonclose
  # Try to connect this many times on failure
  retries  3
  # If a client is bound to a particular backend but it goes down,
  # send them to a different one
  option   redispatch

  timeout  connect 7s
  timeout  queue   300s
  timeout  client  300s
  timeout  server  300s

  # Enable status page at this URL, on the port HAProxy is bound to
  stats    enable
  stats    uri /_haproxy?stats
  stats    refresh 5s
  stats    realm Haproxy\ statistics
  monitor-uri /_haproxy?ping

  default-server inter 30s fastinter 2s downinter 2s

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend zopecluster
  bind {{ pillar['haproxy']['host'] }}:{{ pillar['haproxy']['port'] }}
  default_backend zope

# Load balancing over the zope instances
backend zope
  # Use Zope's __ac cookie as a basis for session stickiness if present.
  appsession __ac len 32 timeout 1d
  # Otherwise add a cookie called "serverid" for maintaining session stickiness.
  # This cookie lasts until the client's browser closes, and is invisible to Zope.
  cookie serverid insert nocache indirect
  # If no session found, use the roundrobin load-balancing algorithm to pick a backend.
  #balance roundrobin
  balance leastconn
  # Use / (the default) for periodic backend health checks
  option httpchk

  # Server options:
  # "cookie" sets the value of the serverid cookie to be used for the server
  # "maxconn" is how many connections can be sent to the server at once
  # "check" enables health checks
  # "rise 1" means consider Zope up after 1 successful health check
  {% for key, instance in pillar['plone']['instances'].items() %}
  {% if not instance.get('debug', False) %}
  server {{ key }} {{ instance['host'] }}:{{ instance['port'] }} cookie {{ key }} check maxconn 2 rise 2 fall 5
  {% endif %}
  {% endfor %}
