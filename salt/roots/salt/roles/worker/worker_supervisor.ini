{% set user = salt['pillar.get']('worker:user', {'name': 'bccvl'}) %}
{% set worker = salt['pillar.get']('worker', {}) %}
{% set data_mover = worker.get('data_mover', '192.168.100.200') %}
{% set data_mover_ca = worker.get('data_mover_ca', 'bccvlca') %}

{# in case we run in virtualbox, we have no reliable way to find the ip address for a specific interface #}
{% if grains.get('virtual', '') == 'VirtualBox' %}
{%   set EXT_IP=',EXT_IP="' + grains.ip_interfaces.eth1[0] + '"' %}
{% else %}
{%   set EXT_IP='' %}
{% endif %}
{% set DATA_MOVER_CA=',DATA_MOVER_CA="/etc/pki/tls/certs/' + data_mover_ca + '.crt.pem"' %}

# TOD: add PYTHONOPTIMIZE=1? ... trun off subprocess daemon check

[program:worker]
command = scl enable python27 ". bin/activate; bin/celery worker --app=org.bccvl.tasks --loglevel=INFO  --queues=worker --no-color -Ofair --hostname=worker@%%h"
environment = CELERY_JSON_CONFIG="/home/{{ user.name }}/worker/celery.json",WORKDIR="/mnt/workdir",DATA_MOVER="https://{{ data_mover }}/_data_mover/data_mover",HOME="/home/{{ user.name }}",USER="{{ user.name }}",MAXENT="/home/{{ user.name }}/maxent.jar",R_LIBS="/home/{{ user.name }}/R_libs"{{ EXT_IP }}{{ DATA_MOVER_CA }}
process_name = worker
directory = /home/{{ user.name }}/worker/
priority = 998
user = {{ user.name }}
stdout_logfile=syslog
stderr_logfile=syslog
autostart = true
numprocs = 1
startsecs = 10

; Wait for current tasks to finish at shutdown
; should be at least the time of the longest expected job
stopwaitsecs = 600

; When resorting to send SIGKILL, we want to kill all child processes as well
killasgroup = true
; Make sure subprocesses are stopped along with main process
stopasgroup = true
