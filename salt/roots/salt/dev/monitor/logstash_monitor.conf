# variant 1 ... run logshash as syslog listener
#               -> configure rsyslogd to forward to this listener

# input {
#   syslog {
#     type => syslog
#     port => 5544
#   }
# }

# output {
#   stdout { }
# }

# variant 2 ... let logstash scan for new logs in the log files folder

input {
  file {
    type => "syslog"
    # modify to path to suit your local syslog configuration.
    # The below will recursively grab all files in /var/log/rsyslog that end in .log
    path => ["/var/log/**/*.log"]
    # comment out below after logstash has slurped in all of your existing logs otherwise
    # you risk it double indexing if you lose your sincedb file.
    # start_position => "beginning"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      overwrite => "message"
      match => {
        "message" => "^(?:<%{POSINT:syslog_pri}>)?%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} (?:%{PROG:program}(?:\[%{POSINT:pid}\])?: )?%{GREEDYDATA:message}"
      }
    }
    syslog_pri { }
    date {
      # season to taste for your own syslog format(s)
      match => [ "timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
    }
  }
}

output {
  elasticsearch {
    bind_host => "127.0.0.1"
    # embedded => false  # allows to run elasticsearch server embedde in here, might be useful if there is only one server anyway
  }
}
